@inject HttpClient Http

<div class="dialog-container" tabindex="0" @onkeydown="KeyDown" @ref="_configurePizzaDialog">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Size:</label>
                <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput" />
                <span class="size-label">
                    @(Pizza.Size)" (£@(Pizza.GetFormattedTotalPrice()))
                </span>
            </div>
            <div>
                <label>Extra toppings:</label>
                @if (toppings == null)
                {
                    <select class="custom-select" disabled>
                      <option>(loading...)</option>
                    </select>
                }
                else if (Pizza.Toppings.Count >= 6)
                {
                  <div>(maximum reached)</div>
                }
                else
                {
                  <select class="custom-select" @onchange="@ToppingSelected">
                    <option value="-1" disabled selected>(none)</option>
                    @foreach (var topping in toppings)
                    {
                      <option value="@topping.Id">@topping.Name - (£@(topping.GetFormattedPrice()))</option>
                    }
                  </select>
                }
            </div>
            <div class="toppings">
                @foreach (var topping in Pizza.Toppings)
                {
                    <div class="topping">
                        <span>@topping.Topping.Name</span>
                        <span class="topping-price">£@(topping.Topping.GetFormattedPrice())</span>
                        <button type="button" class="delete-topping" @onclick="@(() => RemoveTopping(topping.Topping))">x</button>
                    </div>
                }
            </div>
        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <span class="mr-center">
                Price:
                <span class="price">@Pizza.GetFormattedTotalPrice()</span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order ></button>
        </div>
    </div>
</div>

@code {
  List<Topping> toppings;
  [Parameter] public Pizza Pizza { get; set; }
  [Parameter] public EventCallback OnCancel { get; set; }
  [Parameter] public EventCallback OnConfirm { get; set; }

  protected ElementReference _configurePizzaDialog;
  protected async override Task OnInitializedAsync()
  {
    toppings = await Http.GetFromJsonAsync<List<Topping>>("toppings");
  }
  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await _configurePizzaDialog.FocusAsync();
    }
  }

  void ToppingSelected(ChangeEventArgs e)
  {
      if (int.TryParse((string)e.Value, out var index) && index >= 0)
      {
        var topping = toppings.Find(t => t.Id == index);
        AddTopping(topping);
      }
  }

  void AddTopping(Topping topping)
  {
    // do not allow selecting same topping twice
    if (Pizza.Toppings.Find(pt => pt.Topping.Id == topping.Id) == null)
    {
        Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
    }
  }

  void RemoveTopping(Topping topping)
  {
    Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
  }

  void KeyDown(KeyboardEventArgs e)
  {
    if (e.Key == "Escape")
    {
      OnCancel.InvokeAsync(null);
    }
  }
}
