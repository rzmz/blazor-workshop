@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject OrderState OrderState

<div class="main">
  <ul class="pizza-cards">
    @foreach (var special in _specials)
    {
      <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
        <div class="pizza-info">
          <span class="title">
            @special.Name
          </span>
          @special.Description
          <span class="price">
            @special.GetFormattedBasePrice()
          </span>
        </div>
      </li>
    }
  </ul>
</div>

<div class="sidebar">
  @if (OrderState.Order.Pizzas.Any())
  {
    <div class="order-contents">
      <h2>Your order</h2>
      @foreach (var configuredPizza in OrderState.Order.Pizzas)
      {
        <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))"/>
      }
    </div>
    <div class="order-total">
      Totals:
      <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
      <button class="btn btn-warning" @onclick="PlaceOrder">Order</button>
    </div>
  }
  else
  {
    <div class="empty-cart">
      Choose a pizza<br/> to get started
    </div>
  }
</div>

@if (OrderState.ShowConfiguringDialog)
{
  <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="@OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog"/>
}

@code {
  List<PizzaSpecial> _specials = new();

  protected override async Task OnInitializedAsync()
  {
  // The /specials API is defined by a minimal API at PizzaApiExtensions.cs in the BlazingPizza.Server project.
  // BlazingPizza.OrderContext.Default.ListPizzaSpecial refers to Json serialization with source generators.
  // See here: https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation
    _specials = await Http.GetFromJsonAsync("specials", OrderContext.Default.ListPizzaSpecial);
  }
  
  async Task PlaceOrder()
  {
    var response = await Http.PostAsJsonAsync("orders", OrderState.Order);
    var newOrderId = await response.Content.ReadFromJsonAsync<int>();
    OrderState.ResetOrder();
    NavigationManager.NavigateTo($"myorders/{newOrderId}");
  }
}