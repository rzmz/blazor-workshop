@page "/"
@inject HttpClient Http

<div class="main">
    <ul class="pizza-cards">
        @foreach (var special in specials)
        {
            <li @onclick="@(()=> ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                <div class="pizza-info">
                    <span class="title">
                        @special.Name
                    </span>
                    @special.Description
                    <span class="price">
                        @special.GetFormattedBasePrice()
                    </span>
                </div>
            </li>
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>
            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            Choose a pizza<br /> to get started
        </div>
    }
</div>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code {
    List<PizzaSpecial> specials = new();
    Pizza configuringPizza;
    bool showingConfigureDialog;
    Order order = new();

    protected override async Task OnInitializedAsync()
    {
        // The /specials API is defined by a minimal API at PizzaApiExtensions.cs in the BlazingPizza.Server project.
        // BlazingPizza.OrderContext.Default.ListPizzaSpecial refers to Json serialization with source generators.
        // See here: https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-source-generation
        specials = await Http.GetFromJsonAsync<List<PizzaSpecial>>("specials", BlazingPizza.OrderContext.Default.ListPizzaSpecial);
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }
}
