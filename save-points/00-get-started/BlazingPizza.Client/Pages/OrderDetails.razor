@page "/myorders/{orderId:int}"
@inject HttpClient HttpClient
@using BlazingPizza.Client.Shared.Components
@implements IDisposable

<div class="main">
  @if (_invalidOrder)
  {
    <h2>Nope</h2>
    <p>Sorry, this order could not be loaded</p>
  }
  else if (_orderWithStatus == null)
  {
    <text>Loading...</text>
  }
  else
  {
    <div class="track-order">
      <div class="track-order-title">
        <h2>
          Order placed @_orderWithStatus.Order.CreatedTime.ToLongDateString()
        </h2>
        <p class="ml-auto mb-0">
          Status: <strong>@_orderWithStatus.StatusText</strong>
        </p>
      </div>
      <div class="track-order-body">
        <div class="track-order-details">
          <OrderReview Order="_orderWithStatus.Order"/>
        </div>
      </div>
    </div>
  }
</div>

@code {

  [Parameter]
  public int OrderId { get; set; }

  OrderWithStatus _orderWithStatus;
  bool _invalidOrder;
  CancellationTokenSource _pollingCancellationToken;

  protected override void OnParametersSet()
  {
  // If we were already polling for a different order, stop doing so.
    _pollingCancellationToken?.Cancel();

  // Start a new poll loop
    PollForUpdates();
  }

  private async void PollForUpdates()
  {
    _pollingCancellationToken = new CancellationTokenSource();
    while (!_pollingCancellationToken.IsCancellationRequested)
    {
      try
      {
        _invalidOrder = false;
        _orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>($"orders/{OrderId}");
        StateHasChanged();

        if (_orderWithStatus.IsDelivered)
        {
          _pollingCancellationToken.Cancel();
        }
        else
        {
          await Task.Delay(4000);
        }
      }
      catch (Exception ex)
      {
        _invalidOrder = true;
        _pollingCancellationToken.Cancel();
        Console.Error.WriteLine(ex);
        StateHasChanged();
      }
    }
  }

  public void Dispose()
  {
    _pollingCancellationToken?.Cancel();
  }

}